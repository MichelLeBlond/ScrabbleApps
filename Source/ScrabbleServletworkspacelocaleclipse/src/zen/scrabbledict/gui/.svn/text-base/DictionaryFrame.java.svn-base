/**
 *  This file is part of Scrabble DictionaryFrame.
 *
 *  Scrabble DictionaryFrame is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Scrabble DictionaryFrame is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Scrabble DictionaryFrame.  If not, see <http://www.gnu.org/licenses/>.
 */
package zen.scrabbledict.gui;

import java.util.ListIterator;
import java.util.Vector;
import javax.swing.DefaultListModel;
import zen.scrabbledict.data.Dictionary;
import zen.scrabbledict.data.Word;

/**
 * The DictionaryFrame allows the user to look up words and such directly on the
 * dictionary.
 * @author  flszen
 */
public class DictionaryFrame extends javax.swing.JFrame {
    private static final long serialVersionUID = 1;
    
    private Dictionary dict_;
    private DefaultListModel results_ = new DefaultListModel();
    
    /** 
     * Creates new form DictionaryFrame.
     * @param dict The dictionary to look stuff up in.
     */
    public DictionaryFrame(Dictionary dict) {
        dict_ = dict;
        
        initComponents();
        this.setLocationRelativeTo(this.getParent());
        this.getRootPane().setDefaultButton(btnSearch);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSearchType = new javax.swing.ButtonGroup();
        lblQuery = new javax.swing.JLabel();
        tfQuery = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        rbRack = new javax.swing.JRadioButton();
        rbPart = new javax.swing.JRadioButton();
        lblResults = new javax.swing.JLabel();
        spResults = new javax.swing.JScrollPane();
        lstResults = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("zen/scrabbledict/gui/Bundle"); // NOI18N
        setTitle(bundle.getString("DictionaryFrame.title")); // NOI18N
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/zen/scrabbledict/gui/icons/scrabbledict.png")).getImage());

        lblQuery.setText(bundle.getString("DictionaryFrame.lblQuery.text")); // NOI18N

        tfQuery.setText(bundle.getString("DictionaryFrame.tfQuery.text")); // NOI18N

        btnSearch.setText(bundle.getString("DictionaryFrame.btnSearch.text")); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        bgSearchType.add(rbRack);
        rbRack.setText(bundle.getString("DictionaryFrame.rbRack.text")); // NOI18N

        bgSearchType.add(rbPart);
        rbPart.setSelected(true);
        rbPart.setText(bundle.getString("DictionaryFrame.rbPart.text")); // NOI18N

        lblResults.setText(bundle.getString("DictionaryFrame.lblResults.text")); // NOI18N

        lstResults.setModel(results_);
        lstResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        spResults.setViewportView(lstResults);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(lblQuery)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 124, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnSearch))
                    .add(lblResults)
                    .add(spResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(rbPart)
                        .add(18, 18, 18)
                        .add(rbRack)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblQuery)
                    .add(tfQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rbPart)
                    .add(rbRack))
                .add(18, 18, 18)
                .add(lblResults)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(spResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
    results_.clear();
    String query = tfQuery.getText().toUpperCase();
    
    if (rbPart.isSelected()) {
        // Get the list of words.
        Vector<Word> words = dict_.getWords();
        ListIterator<Word> i = words.listIterator();

        // Add matching words.
        while (i.hasNext()) {
            Word w = i.next();
            if (w.getWord().indexOf(query) != -1) {
                results_.addElement(w.getWord());
            }
        }
    } else {
        // Build the results from all matching words (by length, since that's how the engine works.
        String regex = "..";
        for (int x = 2; x < 15; x++) {
            Vector<Word> matches = dict_.matchLetters(regex, query, false);
            
            ListIterator<Word> i = matches.listIterator();
            while (i.hasNext()) {
                Word w = i.next();
                results_.addElement(w);
                System.out.println(w.getWord());
            }
            
            regex += ".";
        }
    }
}//GEN-LAST:event_btnSearchActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSearchType;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel lblQuery;
    private javax.swing.JLabel lblResults;
    private javax.swing.JList lstResults;
    private javax.swing.JRadioButton rbPart;
    private javax.swing.JRadioButton rbRack;
    private javax.swing.JScrollPane spResults;
    private javax.swing.JTextField tfQuery;
    // End of variables declaration//GEN-END:variables

}
