/**
 *  This file is part of Scrabble DictionaryFrame.
 *
 *  Scrabble DictionaryFrame is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  Scrabble DictionaryFrame is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Scrabble DictionaryFrame.  If not, see <http://www.gnu.org/licenses/>.
 */
package zen.scrabbledict.gui;

import edu.stanford.ejalbert.BrowserLauncher;
import edu.stanford.ejalbert.exception.BrowserLaunchingInitializingException;
import edu.stanford.ejalbert.exception.UnsupportedOperatingSystemException;
import java.awt.AWTKeyStroke;
import java.awt.KeyboardFocusManager;
import javax.swing.event.ListSelectionEvent;
import zen.scrabbledict.data.*;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.util.HashSet;
import java.util.Set;
import java.util.TreeSet;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.ListSelectionListener;

/**
 * This is the main game frame!
 * @author  flszen
 */
public class BoardFrame extends javax.swing.JFrame implements LogicListener, DictionaryListener, ListSelectionListener {
    //<editor-fold desc="Fields" defaultstate="collapsed">
    private static final long serialVersionUID = 1;
    private ResultsModel resultsModel = new ResultsModel();
    private String resultRack = null;
    private TableSorter resultsSorter = new TableSorter(resultsModel);
    private EnhancedBoard board = new EnhancedBoard();
    private Dictionary dictionary = new Dictionary(this);
    private boolean preview = false;
    private Logic logic;
    private Preferences prefs = Preferences.userRoot().node("zen.scrabbledict");
    private DictionaryFrame dictionaryFrame;
    //</editor-fold>
    //<editor-fold desc="Constructors" defaultstate="expanded">
    /**
     * Instantiates the BoardFrame.
     */
    public BoardFrame() {
        dictionary = new Dictionary(this);

        // Initialize the frame and components.
        initComponents();
        this.setLocationRelativeTo(this.getParent());
        this.getRootPane().setDefaultButton(btnProcessBoard);

        // Hook up a selection listener on the table.
        tblResults.getSelectionModel().addListSelectionListener(this);

        // Hook up the table sorter.
        resultsSorter.setTableHeader(tblResults.getTableHeader());
        resultsSorter.setSortingStatus(1, 2); // Column #2, descending.
        resultsSorter.setColumnComparator(0, new ScoreComparator(ScoreComparisonType.WORD_ONLY));
        resultsSorter.setColumnComparator(1, new ScoreComparator(ScoreComparisonType.SCORE_ONLY));
        resultsSorter.setColumnComparator(2, new ScoreComparator(ScoreComparisonType.RACK_USAGE));

        // Set the custom focus traversal policy.
        ExplicitFocusTraversal eft = new ExplicitFocusTraversal();
        eft.add(pnlBoard);
        eft.add(tfRack);
        eft.add(tblResults);
        eft.setDefaultComponent(tfRack);
        this.setFocusTraversalPolicy(eft);

        // Add the usual TAB and Shift-TAB as focus traversal keys to the table.
        Set<AWTKeyStroke> set = new HashSet<AWTKeyStroke>(tblResults.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS));
        set.add(KeyStroke.getKeyStroke("TAB"));
        tblResults.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS, set);

        set = new HashSet<AWTKeyStroke>(tblResults.getFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS));
        set.add(KeyStroke.getKeyStroke("shift TAB"));
        tblResults.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS, set);

        // Try to load the preferred dictionary.
        Thread t = new Thread(dictionary);
        t.start();
    }
    //</editor-fold>
    /** This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loadDictChooser = new javax.swing.JFileChooser();
        fcGame = new javax.swing.JFileChooser();
        pnlBoard = new BoardPanel(board);
        lblRack = new javax.swing.JLabel();
        tfRack = new javax.swing.JTextField();
        btnProcessBoard = new javax.swing.JButton();
        lblDictionaryName = new javax.swing.JLabel();
        lblWordsLoaded = new javax.swing.JLabel();
        spResults = new javax.swing.JScrollPane();
        tblResults = new javax.swing.JTable();
        mbMain = new javax.swing.JMenuBar();
        mGame = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miOpen = new javax.swing.JMenuItem();
        miSave = new javax.swing.JMenuItem();
        sepGame1 = new javax.swing.JSeparator();
        miLoadDictionary = new javax.swing.JMenuItem();
        sepGame2 = new javax.swing.JSeparator();
        miQuit = new javax.swing.JMenuItem();
        mOperations = new javax.swing.JMenu();
        miValidate = new javax.swing.JMenuItem();
        miDictionary = new javax.swing.JMenuItem();
        mHelp = new javax.swing.JMenu();
        miAbout = new javax.swing.JMenuItem();
        sepHelp0 = new javax.swing.JSeparator();
        miBasicInstructions = new javax.swing.JMenuItem();
        miForums = new javax.swing.JMenuItem();
        sepHelp1 = new javax.swing.JSeparator();
        miCheckForUpdates = new javax.swing.JMenuItem();

        loadDictChooser.setCurrentDirectory(new File("."));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("zen/scrabbledict/gui/Bundle"); // NOI18N
        loadDictChooser.setDialogTitle(bundle.getString("BoardFrame.loadDictChooser.dialogTitle")); // NOI18N

        fcGame.setAcceptAllFileFilterUsed(false);
        fcGame.setFileFilter(new GameFileFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(bundle.getString("BoardFrame.title")); // NOI18N
        setForeground(java.awt.Color.white);
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/zen/scrabbledict/gui/icons/scrabbledict.png")).getImage());
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnlBoard.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                pnlBoardFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                pnlBoardFocusLost(evt);
            }
        });

        lblRack.setText(bundle.getString("BoardFrame.lblRack.text")); // NOI18N

        tfRack.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfRackKeyTyped(evt);
            }
        });

        btnProcessBoard.setText(bundle.getString("BoardFrame.btnProcessBoard.text")); // NOI18N
        btnProcessBoard.setFocusable(false);
        btnProcessBoard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessBoardActionPerformed(evt);
            }
        });

        lblDictionaryName.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblDictionaryName.setText(bundle.getString("BoardFrame.lblDictionaryName.text")); // NOI18N

        lblWordsLoaded.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblWordsLoaded.setText(bundle.getString("BoardFrame.lblWordsLoaded.text")); // NOI18N

        tblResults.setModel(resultsSorter);
        tblResults.setEnabled(false);
        tblResults.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblResults.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tblResultsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tblResultsFocusLost(evt);
            }
        });
        tblResults.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tblResultsKeyTyped(evt);
            }
        });
        tblResults.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultsMouseClicked(evt);
            }
        });
        spResults.setViewportView(tblResults);

        mGame.setText(bundle.getString("BoardFrame.mGame.text")); // NOI18N

        miNew.setText(bundle.getString("BoardFrame.miNew.text")); // NOI18N
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        mGame.add(miNew);

        miOpen.setText(bundle.getString("BoardFrame.miOpen.text")); // NOI18N
        miOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenActionPerformed(evt);
            }
        });
        mGame.add(miOpen);

        miSave.setText(bundle.getString("BoardFrame.miSave.text")); // NOI18N
        miSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveActionPerformed(evt);
            }
        });
        mGame.add(miSave);
        mGame.add(sepGame1);

        miLoadDictionary.setText(bundle.getString("BoardFrame.miLoadDictionary.text")); // NOI18N
        miLoadDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miLoadDictionaryActionPerformed(evt);
            }
        });
        mGame.add(miLoadDictionary);
        mGame.add(sepGame2);

        miQuit.setText(bundle.getString("BoardFrame.miQuit.text")); // NOI18N
        miQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miQuitActionPerformed(evt);
            }
        });
        mGame.add(miQuit);

        mbMain.add(mGame);

        mOperations.setText(bundle.getString("BoardFrame.mOperations.text")); // NOI18N

        miValidate.setText(bundle.getString("BoardFrame.miValidate.text")); // NOI18N
        miValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miValidateActionPerformed(evt);
            }
        });
        mOperations.add(miValidate);

        miDictionary.setText(bundle.getString("BoardFrame.miDictionary.text")); // NOI18N
        miDictionary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDictionaryActionPerformed(evt);
            }
        });
        mOperations.add(miDictionary);

        mbMain.add(mOperations);

        mHelp.setText(bundle.getString("BoardFrame.mHelp.text")); // NOI18N

        miAbout.setText(bundle.getString("BoardFrame.miAbout.text")); // NOI18N
        miAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miAboutActionPerformed(evt);
            }
        });
        mHelp.add(miAbout);
        mHelp.add(sepHelp0);

        miBasicInstructions.setText(bundle.getString("BoardFrame.miBasicInstructions.text")); // NOI18N
        miBasicInstructions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miBasicInstructionsActionPerformed(evt);
            }
        });
        mHelp.add(miBasicInstructions);

        miForums.setText(bundle.getString("BoardFrame.miForums.text")); // NOI18N
        miForums.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miForumsActionPerformed(evt);
            }
        });
        mHelp.add(miForums);
        mHelp.add(sepHelp1);

        miCheckForUpdates.setText(bundle.getString("BoardFrame.miCheckForUpdates.text")); // NOI18N
        miCheckForUpdates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miCheckForUpdatesActionPerformed(evt);
            }
        });
        mHelp.add(miCheckForUpdates);

        mbMain.add(mHelp);

        setJMenuBar(mbMain);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(pnlBoard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 396, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(spResults, 0, 0, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(lblDictionaryName)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 106, Short.MAX_VALUE)
                        .add(lblWordsLoaded))
                    .add(layout.createSequentialGroup()
                        .add(lblRack)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(tfRack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 85, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(btnProcessBoard)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, pnlBoard, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblRack)
                            .add(tfRack, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(btnProcessBoard))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(spResults, 0, 0, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(lblWordsLoaded)
                            .add(lblDictionaryName))))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void tfRackKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfRackKeyTyped
        // Allow legal characters only.
        if (!String.valueOf(evt.getKeyChar()).toUpperCase().matches("^[A-Z]|\\.$") && evt.getKeyChar() != KeyEvent.VK_BACK_SPACE && evt.getKeyChar() != KeyEvent.VK_DELETE) {
            evt.consume();
        }

        // Limit length.
        if (tfRack.getText().length() > 7) {
            tfRack.setText(tfRack.getText().substring(0, 7));
        }

        // Limit length.
        if (tfRack != null && tfRack.getText().length() == 7 && (tfRack.getSelectedText() == null || tfRack.getSelectedText().length() == 0)) {
            evt.consume();
        }
    }//GEN-LAST:event_tfRackKeyTyped

    private void btnProcessBoardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessBoardActionPerformed
        if (tfRack.getText().length() != 0) {
            // Instantiate the logic thread.
            logic = new Logic(tfRack.getText(), board, dictionary, this);

            // Start the thread.
            logic.start();

            // Disable the button.
            btnProcessBoard.setText("Wait");
            btnProcessBoard.setEnabled(false);

            // Disable the results table.
            tblResults.setEnabled(false);

            // Set the rack string.
            resultRack = tfRack.getText().toUpperCase();
        }
    }//GEN-LAST:event_btnProcessBoardActionPerformed

    private void pnlBoardFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlBoardFocusGained
        int x = 0;
    }//GEN-LAST:event_pnlBoardFocusGained

    private void pnlBoardFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pnlBoardFocusLost
        int x = 0;
    }//GEN-LAST:event_pnlBoardFocusLost

private void miQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miQuitActionPerformed
    this.dispose();
}//GEN-LAST:event_miQuitActionPerformed

private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
    // Ask have the user confirm if the board is not empty.
    if (!board.isEmpty()) {
        // Confirm the new board.
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to start a new game?", "Confirm New", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return; // Don't make the new board.

        }
    }

    // Make the new board.
    board = new EnhancedBoard();
    pnlBoard.setBoard(board);
    pack();
}//GEN-LAST:event_miNewActionPerformed

private void miValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miValidateActionPerformed
    // Show message immediately on empty board.
    if (board.isEmpty()) {
        JOptionPane.showMessageDialog(this, "The board is empty-no words to validate.", "Empty Board", JOptionPane.WARNING_MESSAGE);
        return;
    }

    boolean pass = true;

    // Validate the board.
    for (int x = 0; x < 14; x++) {
        for (int y = 0; y < 14; y++) {
            if (board.getLetter(x, y) != ' ') {
                boolean singleLetter = false;
                if (x == 0 || board.getLetter(x - 1, y) == ' ') {
                    String w = getRightWord(x, y).trim();
                    if (w.length() > 1 && !dictionary.validWord(w)) {
                        JOptionPane.showMessageDialog(this, "The word " + w + " does not exist in the dictionary.", "Invalid Word", JOptionPane.WARNING_MESSAGE);
                        pass = false;
                    } else if (w.length() == 1) {
                        singleLetter = true;
                    }
                }
                if (y == 0 || board.getLetter(x, y - 1) == ' ') {
                    String w = getDownWord(x, y).trim();
                    if (w.length() > 1 && !dictionary.validWord(w)) {
                        JOptionPane.showMessageDialog(this, "The word " + w + " does not exist in the dictionary.", "Invalid Word", JOptionPane.WARNING_MESSAGE);
                        pass = false;
                    } else if (w.length() == 1 && singleLetter) {
                        JOptionPane.showMessageDialog(this, "The letter " + w + " is not part of a word.", "Invalid Word", JOptionPane.WARNING_MESSAGE);
                        pass = false;
                    }
                }
            }
        }
    }

    // Show the success message.
    if (pass) {
        JOptionPane.showMessageDialog(this, "All words are valid.", "Validation Results", JOptionPane.INFORMATION_MESSAGE);
    }
}//GEN-LAST:event_miValidateActionPerformed

private void miLoadDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miLoadDictionaryActionPerformed
    if (!board.isEmpty()) {
        if (JOptionPane.showConfirmDialog(this, "Are you sure you want to load a different dictionary\nwhile a game is in progress?", "Confirm Load", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return;
        }
    }

    // Try and select the current file.
    loadDictChooser.setSelectedFile(new File(prefs.get("dictionary", "")));

    // Load the dictionary first.
    switch (loadDictChooser.showOpenDialog(this)) {
        case JFileChooser.APPROVE_OPTION:
            // Load the file.
            prefs.put("dictionary", loadDictChooser.getSelectedFile().getAbsolutePath());
            dictionary.run();
            break;
        default:
            JOptionPane.showMessageDialog(this, "You need to select a dictionary file to proceed.", "Select a Dictionary", JOptionPane.INFORMATION_MESSAGE);
    }
}//GEN-LAST:event_miLoadDictionaryActionPerformed

private void miOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenActionPerformed
    if (!board.isEmpty()) {
        if (JOptionPane.showConfirmDialog(this, "You have a game in progress, are you sure you\nwant to open another one?", "Confirm Open", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return;
        }
    }

    fcGame.setSelectedFile(null);
    fcGame.showOpenDialog(this);
    if (fcGame.getSelectedFile() != null) {
        board = EnhancedBoard.LoadEnhancedBoard(fcGame.getSelectedFile());

        if (board != null) {
            pnlBoard.setBoard(board);
            pack();
        } else {
            JOptionPane.showMessageDialog(this, "Unable to load the specified file.", "Load Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}//GEN-LAST:event_miOpenActionPerformed

private void miSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveActionPerformed
    if (!board.isEmpty()) {
        fcGame.showSaveDialog(this);
        if (fcGame.getSelectedFile() != null) {
            try {
                // Make sure the file has the extension.
                File f = fcGame.getSelectedFile();
                if (!f.getName().toLowerCase().endsWith(".sdg")) {
                    f = new File(fcGame.getSelectedFile() + ".sdg");
                }

                // Save the game.
                FileOutputStream fos = new FileOutputStream(f);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(new SerializableBoard(board));
                oos.close();
                fos.close();
            } catch (Exception ex) {
                System.err.println(ex);
            }
        }
    } else {
        JOptionPane.showMessageDialog(this, "You cannot save a game with an empty board.", "Sorry...", JOptionPane.INFORMATION_MESSAGE);
    }
}//GEN-LAST:event_miSaveActionPerformed

private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
    // Close an open dictionary.
    if (dictionaryFrame != null && dictionaryFrame.isVisible()) {
        dictionaryFrame.dispose();
    }
}//GEN-LAST:event_formWindowClosing

private void miAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miAboutActionPerformed
    new About(this).setVisible(true);
}//GEN-LAST:event_miAboutActionPerformed

private void miCheckForUpdatesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miCheckForUpdatesActionPerformed
    // Launch the update checker.
    UpdateChecker checker = new UpdateChecker(this);
    Thread tChecker = new Thread(checker);
    tChecker.start();
}//GEN-LAST:event_miCheckForUpdatesActionPerformed

private void miBasicInstructionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miBasicInstructionsActionPerformed
    JOptionPane.showMessageDialog(this, "Use the mouse and/or arrow keys to navigate on the board.\nWhen a cell is selected, type the key of the letter you\nwant in the cell.\n\nEnters letters in your rack into the Rack field, then click\nthe Find Words button.\n\nThe list shows you what words you can place on the board.\nClick on a word to preview it on the board, double-click\n(or press Enter) to place it.\n\nThe period (.) is a wildcard tile. You can use it on the board\nor in the rack.", "Basic Instructions", JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_miBasicInstructionsActionPerformed

private void miForumsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miForumsActionPerformed
    try {
        BrowserLauncher bl = new BrowserLauncher();
        bl.openURLinBrowser("http://sourceforge.net/forum/?group_id=213515");
        return;
    } catch (BrowserLaunchingInitializingException ex) {
        Logger.getLogger(About.class.getName()).log(Level.SEVERE, null, ex);
    } catch (UnsupportedOperatingSystemException ex) {
        Logger.getLogger(About.class.getName()).log(Level.SEVERE, null, ex);
    }
    JOptionPane.showMessageDialog(this, "There was an error opening your web browser.\nhttp://sourceforge.net/forum/?group_id=213515", "Browser Error", JOptionPane.ERROR_MESSAGE);
}//GEN-LAST:event_miForumsActionPerformed

private void tblResultsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblResultsFocusGained
    this.getRootPane().setDefaultButton(null);

    // Show the list preview.
    showListPreview();
}//GEN-LAST:event_tblResultsFocusGained

private void tblResultsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tblResultsFocusLost
    this.getRootPane().setDefaultButton(btnProcessBoard);

    // Clear any existing preview.
    clearListPreview();
}//GEN-LAST:event_tblResultsFocusLost

private void tblResultsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblResultsKeyTyped
    // When enter key is typed, apply the word.
    if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
        // Enter has already pushed the selection to the next row. Roll it back...
        tblResults.getSelectionModel().setSelectionInterval(tblResults.getSelectedRow() - 1, tblResults.getSelectedRow() - 1);
        addSelectedWord();
    }
}//GEN-LAST:event_tblResultsKeyTyped

private void tblResultsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultsMouseClicked
    // Upon double click, process the word to the board.
    if (evt.getClickCount() == 2) {
        addSelectedWord();
    }
}//GEN-LAST:event_tblResultsMouseClicked

private void miDictionaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDictionaryActionPerformed
    if (dictionaryFrame == null || !dictionaryFrame.isVisible()) {
        dictionaryFrame = new DictionaryFrame(dictionary);
        dictionaryFrame.setVisible(true);
    }
}//GEN-LAST:event_miDictionaryActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcessBoard;
    private javax.swing.JFileChooser fcGame;
    private javax.swing.JLabel lblDictionaryName;
    private javax.swing.JLabel lblRack;
    private javax.swing.JLabel lblWordsLoaded;
    private javax.swing.JFileChooser loadDictChooser;
    private javax.swing.JMenu mGame;
    private javax.swing.JMenu mHelp;
    private javax.swing.JMenu mOperations;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JMenuItem miAbout;
    private javax.swing.JMenuItem miBasicInstructions;
    private javax.swing.JMenuItem miCheckForUpdates;
    private javax.swing.JMenuItem miDictionary;
    private javax.swing.JMenuItem miForums;
    private javax.swing.JMenuItem miLoadDictionary;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miOpen;
    private javax.swing.JMenuItem miQuit;
    private javax.swing.JMenuItem miSave;
    private javax.swing.JMenuItem miValidate;
    private zen.scrabbledict.gui.BoardPanel pnlBoard;
    private javax.swing.JSeparator sepGame1;
    private javax.swing.JSeparator sepGame2;
    private javax.swing.JSeparator sepHelp0;
    private javax.swing.JSeparator sepHelp1;
    private javax.swing.JScrollPane spResults;
    private javax.swing.JTable tblResults;
    private javax.swing.JTextField tfRack;
    // End of variables declaration//GEN-END:variables
    //<editor-fold desc="Methods" defaultstate="expanded">
    /**
     * Launch thet app!
     * @param args Program arguments...
     */
    public static void main(String[] args) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BoardFrame().setVisible(true);
            }
        });
    }

    private void addSelectedWord() {
        // Clear any existing preview.
        clearListPreview();

        // Save the word to the board.
        if (tblResults.getSelectedRow() != -1) {
            WordMatch wm = resultsModel.getWordMatch(resultsSorter.modelIndex(tblResults.getSelectedRow())); // Why -1? It wasn't -1 in preview...

            String rack = new String(resultRack);

            if (wm.getDirection() == WordDirection.RIGHT) {
                for (int x = wm.getX(); x < wm.getX() + wm.getWord().length(); x++) {
                    // Set the letter on the board.
                    char c = wm.getWord().charAt(x - wm.getX());
                    board.setLetter(x, wm.getY(), c);

                    // Track rack changes for the purpose of setting wild marks.
                    int rackIndex = -1;
                    if (rack.indexOf(c) == -1) {
                        rackIndex = rack.indexOf('.');
                        if (rackIndex != -1) {
                            board.setWild(x, wm.getY());   // Mark as wild.
                        }
                    } else {
                        rackIndex = rack.indexOf(c);
                        if (rackIndex != -1) {
                            board.clearWild(x, wm.getY());
                        }
                    }

                    // Remove character from the rack.
                    if (rackIndex != -1) {
                        rack = new String((rackIndex > 0 ? rack.substring(0, rackIndex) : "") + rack.substring(rackIndex + 1));
                    }
                }
            } else {
                for (int y = wm.getY(); y < wm.getY() + wm.getWord().length(); y++) {
                    // Set the letter on the board.
                    char c = wm.getWord().charAt(y - wm.getY());
                    board.setLetter(wm.getX(), y, c);

                    // Track rack changes for the purpose of setting wild marks.
                    int rackIndex = -1;
                    if (rack.indexOf(c) == -1) {
                        rackIndex = rack.indexOf('.');
                        if (rackIndex != -1) {
                            board.setWild(wm.getX(), y);   // Mark as wild.
                        }
                    } else {
                        rackIndex = rack.indexOf(c);
                        if (rackIndex != -1) {
                            board.clearWild(wm.getX(), y);
                        }
                    }

                    // Remove character from the rack.
                    if (rackIndex != -1) {
                        rack = new String((rackIndex > 0 ? rack.substring(0, rackIndex) : "") + rack.substring(rackIndex + 1));
                    }
                }
            }

            // Set the rack.
            tfRack.setText(wm.getRackAfter());

            // Clear table now.
            tblResults.getSelectionModel().setSelectionInterval(-1, -1);
            resultsModel.clearResults();

            // Focus the board now. (It's either this or the rack...)
            pnlBoard.requestFocus();

            // Disable the list.
            tblResults.setEnabled(false);
        }
    }

    private void clearListPreview() {
        if (preview) {
            preview = false;
            pnlBoard.clearPreview();
        }
    }

    private void showListPreview() {
        // Do the preview is an item is selected.
        if (tblResults.getSelectedRow() != -1) {
            preview = true;
            WordMatch wm = resultsModel.getWordMatch(resultsSorter.modelIndex(tblResults.getSelectedRow()));

            if (wm.getDirection() == WordDirection.RIGHT) {
                for (int x = wm.getX(); x < wm.getX() + wm.getWord().length(); x++) {
                    pnlBoard.previewLetter(x, wm.getY(), wm.getWord().charAt(x - wm.getX()));
                }
            } else {
                for (int y = wm.getY(); y < wm.getY() + wm.getWord().length(); y++) {
                    pnlBoard.previewLetter(wm.getX(), y, wm.getWord().charAt(y - wm.getY()));
                }
            }
        }
    }

    public void processingComplete() {
        // Declare the results vector.
        Vector<WordMatch> results = new Vector<WordMatch>();

        // Must use ScoreComparator to sort the tree.
        TreeSet<WordMatch> matches = new TreeSet<WordMatch>(new ScoreComparator(ScoreComparisonType.RACK_USAGE));
        matches.addAll(logic.getResults());
        results.addAll(matches);

        // Set up the table.
        if (matches.isEmpty()) {
            resultsModel.clearResults();
        } else {
            resultsModel.setResults(results);

            // Enable the table.
            tblResults.setEnabled(true);

            // Focus the list.
            tblResults.requestFocus();
            tblResults.getSelectionModel().setSelectionInterval(0, 0);
        }

        // Enable the button.
        btnProcessBoard.setText("Process");
        btnProcessBoard.setEnabled(true);
    }

    public void wordCountUpdated() {
        // Disable things and focus load dictionary if there's no dictionary.
        if (dictionary.getWordCount() == 0) {
            pnlBoard.setEnabled(false);
            tfRack.setEnabled(false);
            btnProcessBoard.setEnabled(false);
            //miDictionaryLookup.setEnabled(false);
            miValidate.setEnabled(false);
        } else {
            pnlBoard.setEnabled(true);
            tfRack.setEnabled(true);
            btnProcessBoard.setEnabled(true);
            //miDictionaryLookup.setEnabled(true);
            miValidate.setEnabled(true);
            tfRack.requestFocus();
        }

        lblDictionaryName.setText(dictionary.getName());
        lblWordsLoaded.setText(String.valueOf(dictionary.getWordCount()) + " Words");
    }

    /**
     * A simple method for calculating the points of any given word.
     */
    private int getWordScore(String word) {
        int points = 0;
        for (int i = 0; i < word.length(); i++) {
            points += Tiles.Scores[Tiles.getIndexOf(word.charAt(i))];
        }
        return points;
    }

    private String getDownWord(int x, int Y) {
        String word = "";
        for (int y = Y; y < 15 && board.getLetter(x, y) != ' '; y++) {
            word += String.valueOf(board.getLetter(x, y));
        }
        return word;
    }

    private String getRightWord(int X, int y) {
        String word = "";
        for (int x = X; x < 15 && board.getLetter(x, y) != ' '; x++) {
            word += String.valueOf(board.getLetter(x, y));
        }
        return word;
    }

    public void dictionaryCantLoad() {
        pnlBoard.setEnabled(false);
        tfRack.setEnabled(false);
        btnProcessBoard.setEnabled(false);
        //miDictionaryLookup.setEnabled(false);
        miValidate.setEnabled(false);
        JOptionPane.showMessageDialog(this, "Please load a dictionary in the Game menu.\n\nThe TWL and SOWPODS dictionaries are\npackaged with this application.", "Scrabble Dictionary", JOptionPane.INFORMATION_MESSAGE);
    }

    public void valueChanged(ListSelectionEvent e) {
        // Clear any existing preview.
        clearListPreview();

        // Show the new preview.
        showListPreview();
    }
    //</editor-fold>
}
